import inspect
import MySQLdb
import ConfigParser
import pycurl
import time
import sys
import csv
from StringIO import StringIO

from db_config import config
version = "_v2"

def db_connect():
    if config['type'] == 'MySQL':
        try:
            db = MySQLdb.connect(host=config['host'],
                                 user=config['user'],
                                 passwd=config['password'],
                                 db=config['db'],
                                 use_unicode=True,
                                 charset="utf8")
            return db
        except Exception, e:
            print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
            return None

def create_table_location(db):
    cur = db.cursor()
    table_name = "location" + version
    sql =   '''
            CREATE TABLE IF NOT EXISTS %s (
                id                  INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
                location_id         INT,
                location_name       VARCHAR(100),
                lat                 DOUBLE,
                lon                 DOUBLE,
                number_of_img       INT,
                category            VARCHAR(100),
                city                VARCHAR(100),
                city_chinese        VARCHAR(100),
                district            VARCHAR(100),
                district_chinese    VARCHAR(100),
                UNIQUE  (location_id)
            )
            ''' % (table_name,)
    try:
        cur.execute(sql)
        print "Created table %s" % (table_name,)
    except Exception, e:
        print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
        sys.exit(1)

def create_table_location_image_cache(db):
    cur = db.cursor()
    # check if the location_image_cache table exists.
    # if not, we should build one.
    # else, create a new one. Back up the old one and use the new one.
    sql = "SHOW TABLES"
    try:
        cur.execute(sql)
    except Exception, e:
        print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
        sys.exit(1)
    table_names = [i[0].encode('utf-8') for i in cur.fetchall()]
    if "location_image_cache" not in table_names:
        table_name = "location_image_cache"
    else:
        table_name = "location_image_cache_" + time.strftime("%Y%m%d%H%M", time.localtime())

    sql =   """
                CREATE TABLE IF NOT EXISTS %s AS
                (
                    SELECT location.*, p.urls, p.image_ids FROM location LEFT JOIN
                    (
                        SELECT k.location_id, GROUP_CONCAT(image_url) as urls, GROUP_CONCAT(seq_id) as image_ids FROM
                        (
                            SELECT t.*, @num := if(@location_id = location_id, @num + 1, 1) AS row_number, @location_id := location_id AS dummy FROM
                            (
                                SELECT * FROM image WHERE available!=0 ORDER BY location_id ASC, ranking, with_face
                            ) t
                            GROUP BY location_id, row_number HAVING row_number <= 3
                        ) k JOIN
                        (
                            SELECT @num:=0, @location_id=NULL
                        ) q
                        GROUP BY location_id
                    ) p
                    ON location.location_id=p.location_id
                )
            """ % (table_name,)
    try:
        cur.execute(sql)
    except Exception, e:
        print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
        sys.exit(1)
    print "Created table %s" % (table_name,)

    if table_name != "location_image_cache":
        # rename the old table to table_with_time and rename the new table to location_image_cache
        sql =   "RENAME TABLE location_image_cache TO tmp_table, %s TO location_image_cache, tmp_table TO %s" % (table_name, table_name)
        try:
            cur.execute(sql)
        except Exception, e:
            print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
            sys.exit(1)
        print "Swapped the old one and the new one"
def create_table_set_broken_image(db):
    cur = db.cursor()
    table_name = "set_broken_image" + version
    sql = '''
             CREATE TABLE IF NOT EXISTS %s (
                id              INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
                image_url       VARCHAR(500),
                operation       INT
             )
          ''' % (table_name,)
    try:
        cur.execute(sql)
        print "Created table %s" % (table_name,)
    except Exception, e:
        print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
        sys.exit(1)

def create_table_image_with_face(db):
    cur = db.cursor()
    table_name = "image_with_face" + version
    sql =   '''
            CREATE TABLE IF NOT EXISTS %s (
                id                  INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
                location_id         INT,
                description         VARCHAR(200),
                image_url           VARCHAR(500),
                image_instagram_url VARCHAR(500),
                ranking             INT,
                avaiable            INT DEFAULT -1
            )
            ''' % (table_name,)
    try:
        cur.execute(sql)
        print "Created table %s" % (table_name,)
    except Exception, e:
        print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
        sys.exit(1)

def create_table_image_without_face(db):
    cur = db.cursor()
    table_name = "image_without_face" + version
    sql =   '''
            CREATE TABLE IF NOT EXISTS %s (
                id                  INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
                location_id         INT,
                description         VARCHAR(200),
                image_url           VARCHAR(500),
                image_instagram_url VARCHAR(500),
                ranking             INT,
                avaiable            INT DEFAULT -1
            )
            ''' % (table_name,)
    try:
        cur.execute(sql)
        print "Created table %s" % (table_name,)
    except Exception, e:
        print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
        sys.exit(1)

def create_table_image_representative(db):
    cur = db.cursor()
    table_name = "image_representative" + version
    sql =   '''
            CREATE TABLE IF NOT EXISTS %s (
                id                  INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
                location_id         INT,
                image_url           VARCHAR(500),
                image_url_small     VARCHAR(500),
                avaiable            INT DEFAULT -1
            )
            ''' % (table_name,)
    try:
        cur.execute(sql)
        print "Created table %s" % (table_name,)
    except Exception, e:
        print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
        sys.exit(1)

def insert_location(db, dir_path):
    cur = db.cursor()

    f = open(dir_path, 'r')
    count = 0
    for line in csv.DictReader(f, delimiter='\t'):
        try:
            cur.execute("""INSERT INTO location_v2 (location_id, location_name, lat, lon, number_of_img, category) VALUES (%s, %s, %s, %s, %s, %s)""", (int(line['location_id']), line['location_name'], float(line['lat']), float(line['lon']), int(line['number_of_img']), line['category']))
            db.commit()
            print str(count) + " location_id = " + line['location_id'] + " , name = " + line['location_name']
        except Exception, e:
            db.rollback()
            print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
            sys.exit(1)
        count += 1
    f.close()
def insert_image_with_face(db, dir_path):
    cur = db.cursor()

    f = open(dir_path, 'r')
    count = 0
    for line in csv.DictReader(f, delimiter='\t'):
        try:
            # location_id image_url image_instagram_url ranking description
            cur.execute("""INSERT INTO image_with_face_v2 (location_id, image_url, image_instagram_url, ranking, description) VALUES (%s, %s, %s, %s, %s)""", (int(line['location_id']), line['image_url'], line['image_instagram_url'], int(line['ranking']), line['description']))
            db.commit()
            print str(count) + " location_id = " + line['location_id'] + " , name = " + line['image_url']
        except Exception, e:
            db.rollback()
            print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
            sys.exit(1)
        count += 1
    f.close()

def insert_image_without_face(db, dir_path):
    cur = db.cursor()

    f = open(dir_path, 'r')
    count = 0
    for line in csv.DictReader(f, delimiter='\t'):
        try:
            # location_id image_url image_instagram_url ranking description
            cur.execute("""INSERT INTO image_without_face_v2 (location_id, image_url, image_instagram_url, ranking, description) VALUES (%s, %s, %s, %s, %s)""", (int(line['location_id']), line['image_url'], line['image_instagram_url'], int(line['ranking']), line['description']))
            db.commit()
            print str(count) + " location_id = " + line['location_id'] + " , name = " + line['image_url']
        except Exception, e:
            db.rollback()
            print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
            sys.exit(1)
        count += 1
    f.close()

def insert_image_representative(db, dir_path):
    cur = db.cursor()

    f = open(dir_path, 'r')
    count = 0
    for line in csv.DictReader(f, delimiter='\t'):
        try:
            # location_id image_url image_url_small
            cur.execute("""INSERT INTO image_representative_v2 (location_id, image_url, image_url_small) VALUES (%s, %s, %s)""", (int(line['location_id']), line['image_url'], line['image_url_small']))
            db.commit()
            print str(count) + " location_id = " + line['location_id'] + " , name = " + line['image_url']
        except Exception, e:
            db.rollback()
            print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
            sys.exit(1)
        count += 1
    f.close()

def try_cache_image(db):
    cur = db.cursor()
    try:
        cur.execute("""SELECT seq_id, image_url FROM image WHERE available=-1""")
    except Exception, e:
        print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
        sys.exit(1)
    fetchdata = cur.fetchall()
    buffer = StringIO()
    curl = pycurl.Curl()
    for row in fetchdata:
        curl.setopt(curl.URL, row[1])
        curl.setopt(curl.WRITEDATA, buffer)
        curl.perform()
        status = curl.getinfo(pycurl.HTTP_CODE)
        print "image_id = %s, status = %d" % (row[0], status)

        try:
            cur.execute("""UPDATE image SET available=%s WHERE seq_id=%s""", (1 if status is 200 else 0, row[0]))
            db.commit()
        except Exception, e:
            db.rollback()
            print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
            sys.exit(1)

    curl.close()
def test_broken_image(db):
    cur = db.cursor()
    try:
        cur.execute("""SELECT set_broken_image.image_id, image.image_url FROM set_broken_image LEFT JOIN image ON set_broken_image.image_id=image.seq_id WHERE operation=0""")
    except Exception, e:
        print e
        sys.exit(1)
    fetchdata = cur.fetchall()
    buffer = StringIO()
    curl = pycurl.Curl()
    for row in fetchdata:
        curl.setopt(curl.URL, row[1])
        curl.setopt(curl.WRITEDATA, buffer)
        curl.perform()
        status = curl.getinfo(pycurl.HTTP_CODE)
        if status is 200:
            print "========================================="
            print "image %d : %s is incorrectly set broken" % (row[0], row[1],)
            try:
                cur.execute("""UPDATE image SET available=%s WHERE seq_id=%s""", (1, row[0],))
                db.commit()
                print "Recover it to AVAILABLE"
            except Exception, e:
                print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
            try:
                cur.execute("""INSERT INTO set_broken_image (image_id, operation) VALUES (%s, %s)""", (row[0], 1,))
                db.commit()
                print "INSERT the RECOVERY operation into set_broken_image table"
            except Exception, e:
                print "ERROR in %s : %s" % (inspect.stack()[0][3], str(e),)
            print "========================================="
        else:
            print "image %d is broken, status code = %d" % (row[0], status,)
if __name__ == '__main__':
    db = db_connect()
    if db != None:
        '''
        print "DB connection success!"
        create_table_location(db)
        create_table_loc_img(db)
        create_table_set_broken_image(db)
        insert_location(db)
        insert_loc_img(db)
        create_table_image_representative(db)
        '''
        create_table_location(db)
        create_table_image_with_face(db)
        create_table_image_without_face(db)
        create_table_image_representative(db)
        insert_image_with_face(db, "resource/image_with_face.csv")
        insert_image_without_face(db, "resource/image_with_face.csv")
        insert_image_representative(db, "resource/image_representative.csv")
        #create_table_set_broken_image(db)
        #insert_location(db, "resource/location.csv")
        db.close()
    else:
        print "db_connect() failed"
